template(name='questions')
    .ui.stackable.padded.grid
        .row
            .four.wide.column
                .ui.big.inline.header 
                    +i name='what'
                    |#{questions.count}
                    |questions
                if currentUser
                    i.green.plus.circular.green.link.icon.new_question.zoomer
                .ui.header total answers        
                .ui.header total questions        
                .ui.header total points earned
                .ui.header recent questions
                .ui.header recent answers
                .ui.selection.animated.list
                    each recent_answers
                        a.item(href="/question/#{question_id}") #{answer_title} #{when}
            
                    // i.remove.circular.link.icon.clear_filter(title='clear filters')
            .twelve.wide.column
                |view
                +session_set key='question_sort_filter' value='answered'               
                +session_set key='question_sort_filter' value='unanswered'
                |sort by
                +session_set key='question_sort_key' value='_timestamp' label='when' icon='clock'   
                +session_set key='question_sort_key' value='points_per_answer' label='pts' icon='coins'   
                .ui.hidden.divider
                if subs_ready
                    .ui.centered.four.cards.scrolling
                        each questions 
                            +question_card_template
                // else 
                // .ui.raised.segment
                //     .ui.placeholder 
                //         .image.header 
                //             .line
                //             .line 
                //         .paragraph
                //             .medium.line
                //             .short.line

template(name='question_card_template')
    a.card.fly_left(href="/question/#{_id}")
        // .ui.header.goto_question #{title}
        if image_id 
            +image_view key='image_id'
        .content
            .ui.header #{title}
            |!{description}
            each question_choice_docs
                .ui.big.label(class=color)
                    |#{title}
            if points_per_answer
                .ui.inline.green.header +#{points_per_answer}pts

            span(title='views')
                i.eye.icon
                |#{views}
            span(title='views')
                i.reply.icon 
                |#{answer_count}
            if tags
                i.grey.tags.icon 
                each tags
                    .ui.small.basic.label #{this}
            // +array_view key='tags' direct=true
            // div
            // .ui.icon.large.button.edit_question(title='edit question') 

template(name='question_view')
    with current_doc
        .ui.stackable.padded.grid
            .row 
                .four.wide.column
                    .ui.big.header #{title}
                    a.ui.big.basic.button.fly_left(href="/questions")
                        i.chevron.left.icon
                        +i name='what' cl='ui avatar image'
                        |questions
                    if can_edit 
                        a.ui.basic.button(href="/question/#{_id}/edit" title='edit') 
                            i.pencil.grey.icon
                            |edit
                    .ui.header #{points_per_answer} points earned per answer
                    .ui.header #{total_points_available} total points available

                    //- +multi_user_edit key='subscriber_ids' label='subscriptions' direct=true
                    +author_info
                    .ui.header #{views} views
                    .ui.header question type: #{question_type}
                    +creation_info
                    div
                    | !{description}
                    if image_id
                        +image_view key='image_id' direct=true
                    // +viewing
                    div
                    // +voting_full
                    +comments
                .four.wide.column
                    if key_value_is 'question_type' 'rating'
                        .ui.header rating
                    if key_value_is 'question_type' 'boolean'
                        .ui.header boolean
                    if key_value_is 'question_type' 'multiple_choice'
                        .ui.header choices:
                        .ui.doubling.two.cards.smallscroll
                            each choice_docs
                                .ui.card(class=color)
                                    if image_id
                                        img.ui.inline.image(src="{{c.url image_id width=400 height=400 gravity='face' crop='fill'}}")
                                    .content
                                        .ui.header #{title}
                    .ui.button.create_child
                        |create child question
                .eight.wide.column
                    .ui.big.fluid.blue.button.new_answer
                        |answer
                        i.right.chevron.large.icon
                    .ui.header 
                        |#{answer_docs.count}
                        |answers 
                    .ui.list
                        each answer_docs
                            .item
                                .content
                                    .ui.header
                                        if answer_choice_title
                                            |#{answer_choice_title}
                                        if answer_rating
                                            |#{answer_rating}
                                            // i.yelslow.star.icon
                                            // each val in answer_rating
                                            //     .ui.header hi
                                            +rating_read amount=answer_rating
                                    i.user.icon 
                                    |#{answer_username}
                                    | #{when}
                                    if in_dev
                                        +remove_button



template(name='question_edit')
    with current_doc
        .ui.stackable.padded.grid
            .row 
                .six.wide.column
                    a.ui.icon.fluid.big.green.button(href="/question/#{_id}") 
                        i.checkmark.large.icon
                    +text_edit key='title' label='title' direct=true
                    +html_edit key='description' label='description' direct=true
                    +array_edit key='tags' label='tags' direct=true
                    +image_edit key='image_id' label='image'
                    +number_edit key='points_per_answer' label='points earned per answer'
                    +remove_button
                .ten.wide.column
                    .ui.header
                        +i name='git-fork'
                        |parent
                    
                    if parent_id
                        a.ui.button(href="/question/#{parent_id}") 
                            i.chevron.up.icon
                            // |parent id #{_id}
                            |parent title: #{parent_doc.title}
                    else 
                        .ui.button.create_parent
                            i.chevron.up.icon
                            i.plus.icon
                            |create parent 
                    
                    div 
                    // +number_edit key='total_points_available' value='total points available'
                    // .ui.header #{answers_funded} answers funded
                    +key_value_set key='question_type' value='boolean' icon='switch-on'
                    +key_value_set key='question_type' value='rating' icon='star'
                    +key_value_set key='question_type' value='written' icon='list'
                    +key_value_set key='question_type' value='multiple_choice' icon='list'
                    +key_value_set key='question_type' value='number' icon='hashtag'
                    .ui.hidden.divider
                    if key_value_is 'question_type' 'number'
                        +key_value_set key='number_type' value='float' icon='float'
                        +key_value_set key='number_type' value='integer' icon='integer'
                        
                    if key_value_is 'question_type' 'written'
                        +key_value_set key='number_type' value='short' icon='line'
                        +key_value_set key='number_type' value='long' icon='paragraph'
                        
                    if key_value_is 'question_type' 'boolean'
                        +key_value_set key='boolean_type' value='yes/no' icon='thumbs-up'
                        +key_value_set key='boolean_type' value='true/false' icon='switch-on'
                        // +key_value_set key='boolean_type' value='true/false' icon='switch-on'
                        
                    if key_value_is 'question_type' 'rating'
                        +number_edit key='max_rating' direct=true
                    if key_value_is 'question_type' 'multiple_choice'
                        .ui.header multiple choice
                        +key_value_set key='multiple_choice_type' value='user_choice' icon='groups'
                        +key_value_set key='multiple_choice_type' value='doc_choice' icon='database'
                        +key_value_set key='multiple_choice_type' value='custom' icon='database'

                        if key_value_is 'multiple_choice_type' 'custom'
                            .ui.inline.header 
                                |possible answers
                            i.plus.link.circular.large.icon.add_choice
                            div
                            .ui.two.doubling.cards
                                each choice_docs
                                    .ui.card(class=color)
                                        .content
                                            // if image_id
                                            //     img.ui.inline.image(src="{{c.url image_id width=400 height=400 gravity='face' crop='fill'}}")
                                            +text_edit key='title' direct=true
                                            +text_edit key='color' direct=true
                                            +image_edit key='image_id' direct=true
                                            +remove_button
                                
                            
                            
                            
